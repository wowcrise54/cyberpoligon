---
- name: Сбор сведений о ВМ в oVirt (с IP-адресами)
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # -------------------- параметры подключения --------------------
    api_url:  "https://cluster.acid-tech.ru/ovirt-engine/api"
    api_user: "admin@zvirt@internal"
    api_pass: "P@ssw0rd"                 # ► лучше хранить в Ansible Vault
    ca_file:  "/app/pki-resource.cer"

    # -------------------- куда сохранять результаты ----------------
    raw_output_path:       "/app/json/vms_raw.json"
    formatted_output_path: "/app/json/vms_formatted.json"

  tasks:
  # -----------------------------------------------------------------
  # 1. Логинимся и получаем факт `ovirt_auth` (token + url + user).
  #    Не регистрируем под тем же именем, чтобы не затереть факт.
  # -----------------------------------------------------------------
  - name: Логинимся в oVirt
    ovirt.ovirt.ovirt_auth:
      url:      "{{ api_url }}"
      username: "{{ api_user }}"
      password: "{{ api_pass }}"
      ca_file:  "{{ ca_file }}"

  # -----------------------------------------------------------------
  # 2. Пытаемся получить ВМ новой опцией follow → reported_devices.
  #    Если коллекция старая и follow не поддерживается, используем
  #    fetch_nested + nested_attributes (резерв на rescue-ветке).
  # -----------------------------------------------------------------
  - name: Получаем список ВМ (follow → reported_devices)
    block:
      - ovirt.ovirt.ovirt_vm_info:
          auth: "{{ ovirt_auth }}"     # факт, автоматом доступный после auth
          follow:
            - reported_devices
        register: vm_raw
    rescue:
      - ovirt.ovirt.ovirt_vm_info:
          auth: "{{ ovirt_auth }}"
          fetch_nested: true
          nested_attributes:
            - reported_devices
        register: vm_raw

  # -----------------------------------------------------------------
  # 3. Сохраняем «сырые» данные.
  # -----------------------------------------------------------------
  - name: Сохраняем необработанный JSON
    copy:
      content: "{{ vm_raw | to_nice_json }}"
      dest: "{{ raw_output_path }}"

  # -----------------------------------------------------------------
  # 4. Готовим красивый список.
  # -----------------------------------------------------------------
  - name: Инициализируем список форматированных ВМ
    set_fact: { formatted_vms: [] }

  - name: Формируем структуру (IP через фильтр ovirtvmips)
    set_fact:
      formatted_vms: >-
        {{ formatted_vms + [ {
            'id':         item.id,
            'name':       item.name,
            'os_type':    item.os.type | default('unknown'),
            'cpu_cores':  item.cpu.topology.cores | default(0),
            'memory_gb':  ((item.memory | int) // 1073741824),
            'status':     item.status | default('unknown'),
            'address':    ([item] | ovirt.ovirt.ovirtvmips | first | default('n/a'))
          } ] }}
    loop: "{{ vm_raw.ovirt_vms }}"
    when: item.name != 'HostedEngine'           # пропускаем служебную HE-VM

  # -----------------------------------------------------------------
  # 5. Сохраняем форматированный JSON.
  # -----------------------------------------------------------------
  - name: Сохраняем форматированные данные
    copy:
      content: "{{ formatted_vms | to_nice_json }}"
      dest: "{{ formatted_output_path }}"

  # -----------------------------------------------------------------
  # 6. Завершаем сессию.
  # -----------------------------------------------------------------
  - name: Выходим из oVirt
    ovirt.ovirt.ovirt_auth:
      state: absent
      ovirt_auth: "{{ ovirt_auth }}"
